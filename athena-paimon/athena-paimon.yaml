Transform: 'AWS::Serverless-2016-10-31'
Metadata:
  'AWS::ServerlessRepo::Application':
    Name: AthenaPaimonConnector
    Description: 'This connector enables Amazon Athena to communicate with Apache Paimon, making your Paimon table accessible via SQL.'
    Author: 'xxx'
    SpdxLicenseId: Apache-2.0
#    LicenseUrl: LICENSE.txt
#    ReadmeUrl: README.md
    Labels:
      - athena-federation
    HomePageUrl: 'https://github.com/awslabs/aws-athena-query-federation'
    SemanticVersion: 2024.01.1
    SourceCodeUrl: 'https://github.com/awslabs/aws-athena-query-federation'
Parameters:
  AthenaCatalogName:
    Description: 'This is the name of the lambda function that will be created. This name must satisfy the pattern ^[a-z0-9-_]{1,64}$'
    Type: String
    AllowedPattern: ^[a-z0-9-_]{1,64}$
  SpillBucket:
    Description: 'The name of the bucket where this function can spill data.'
    Type: String
  SpillPrefix:
    Description: 'The prefix within SpillBucket where this function can spill data.'
    Type: String
    Default: athena-spill
  PaimonDataBucket:
    Description: 'The name of the bucket where this Paimon catalog sits.'
    Type: String
  PaimonDataPrefix:
    Description: 'The prefix within SpillBucket where this function can read Paimon data, do not start with "/"'
    Type: String
  AWSAccessKey:
    Description: 'The accessKey of AWS used for authentication'
    Type: String
  AWSSecretKey:
    Description: 'The secretKey of AWS used for authentication'
    Type: String
  AWSSessionToken:
    Description: 'The session token used for temporary authentication, usually for TemporaryAWSCredentialsProvider'
    Type: String
    Default: ""
  LambdaTimeout:
    Description: 'Maximum Lambda invocation runtime in seconds. (min 1 - 900 max)'
    Default: 900
    Type: Number
  LambdaMemory:
    Description: 'Lambda memory in MB (min 128 - 3008 max).'
    Default: 3008
    Type: Number
  LambdaRole:
    Description: "(Optional) A custom role to be used by the Connector lambda"
    Type: String
    Default: ""
  DisableSpillEncryption:
    Description: "WARNING: If set to 'true' encryption for spilled data is disabled."
    Default: 'false'
    Type: String
  KMSKeyId:
    Description: "(Optional) By default any data that is spilled to S3 is encrypted using AES-GCM and a randomly generated key. Setting a KMS Key ID allows your Lambda function to use KMS for key generation for a stronger source of encryption keys."
    Type: String
    Default: ""
  PermissionsBoundaryARN:
    Description: "(Optional) An IAM policy ARN to use as the PermissionsBoundary for the created Lambda function's execution role"
    Default: ''
    Type: String

Conditions:
  HasKMSKeyId: !Not [!Equals [!Ref KMSKeyId, ""]]
  NotHasLambdaRole: !Equals [!Ref LambdaRole, ""]
  HasPermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundaryARN, "" ] ]
  CreateKMSPolicy: !And [ !Condition HasKMSKeyId, !Condition NotHasLambdaRole ]

Resources:
  ConnectorConfig:
    Type: 'AWS::Serverless::Function'
    Properties:
      Environment:
        Variables:
          disable_spill_encryption: !Ref DisableSpillEncryption
          spill_bucket: !Ref SpillBucket
          spill_prefix: !Ref SpillPrefix
          kms_key_id: !If [HasKMSKeyId, !Ref KMSKeyId, !Ref "AWS::NoValue"]
          paimon_data_bucket: !Ref PaimonDataBucket
          paimon_data_prefix: !Ref PaimonDataPrefix
          access_key: !Ref AWSAccessKey
          secret_key: !Ref AWSSecretKey
          session_token: !Ref AWSSessionToken

      FunctionName: !Ref AthenaCatalogName
#      Handler: "me.aws.athena.connector.paimon.PaimonCompositeHandler"
#      CodeUri: "./target/athena-paimon-2024.01.1.jar"
      PackageType: "Image"
      ImageUri: "719135481877.dkr.ecr.us-west-2.amazonaws.com/athena-connector:latest"
      Description: "Enables Amazon Athena to communicate with Apache Paimon, making your Paimon table accessible via Athena SQL"
#      Runtime: java11
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Role: !If [NotHasLambdaRole, !GetAtt FunctionRole.Arn, !Ref LambdaRole]

  FunctionRole:
    Condition: NotHasLambdaRole
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If [ HasPermissionsBoundary, !Ref PermissionsBoundaryARN, !Ref "AWS::NoValue" ]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  FunctionExecutionPolicy:
    Condition: NotHasLambdaRole
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: FunctionExecutionPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - logs:Describe*
              - logs:Get*
              - logs:List*
              - logs:StartQuery
              - logs:StopQuery
              - logs:TestMetricFilter
              - logs:FilterLogEvents
              - athena:GetQueryExecution
              - s3:ListAllMyBuckets
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketLocation
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetLifecycleConfiguration
              - s3:PutLifecycleConfiguration
              - s3:DeleteObject
            Effect: Allow
            Resource:
              - Fn::Sub:
                  - arn:${AWS::Partition}:s3:::${bucketName}
                  - bucketName:
                      Ref: SpillBucket
              - Fn::Sub:
                  - arn:${AWS::Partition}:s3:::${bucketName}/*
                  - bucketName:
                      Ref: SpillBucket
              - Fn::Sub:
                  - arn:${AWS::Partition}:s3:::${bucketName}
                  - bucketName:
                      Ref: PaimonDataBucket
              - Fn::Sub:
                  - arn:${AWS::Partition}:s3:::${bucketName}/*
                  - bucketName:
                      Ref: PaimonDataBucket
      Roles:
        - !Ref FunctionRole

  FunctionKMSPolicy:
    Condition: CreateKMSPolicy
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: FunctionKMSPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - kms:GenerateRandom
            Effect: Allow
            Resource: '*'
          - Action:
              - kms:GenerateDataKey
            Effect: Allow
            Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KMSKeyId}"
      Roles:
        - !Ref FunctionRole